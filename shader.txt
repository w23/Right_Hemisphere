{"totalDuration":4590,"variables":{"Fade":{"frames":{"0":0,"119":0.3,"120":0.6118975360576924,"134":0.47,"150":0.5261538461538462,"240":1,"4071":1,"4589":0,"14130":1,"14400":0},"min":0,"max":1},"shift11":{"frames":{"90":1,"360":0.763,"360.1":0.8766666666666667,"720":0.81,"720.1":0.44666666666666666,"900":0.2892307692307692,"3600":0.5507692307692308},"min":0,"max":300},"zoomshift":{"frames":{"240":0.3417721518987341,"240.1":0.3291139240506329,"300":0.3417721518987341,"870":0.3417721518987341,"871":0.3164556962025316,"934":0.3038,"935":0.3417721518987341,"2040":0.3417721518987341,"2041":0.36708860759493667,"2056":0.36708860759493667,"2057":0.3417721518987341,"2880":0.3417721518987341,"2880.1":0.9111392405063291,"2910":0.9046153846153846,"3360":0.36708860759493667,"3369":0.720327287066246,"3375":0.6892744479495267,"3380":0.7050473186119874,"3386":0.692429022082019,"3390":0.695583596214511,"3600":0.49367088607594933,"3750":0.49367088607594933,"3751":0.4430379746835443,"3767":0.4873417721518987,"3777":0.48101265822784806,"3810":0.49367088607594933},"min":0.1,"max":8},"steps":{"frames":{"480":0.5,"480.1":0.75,"600":0.75,"600.1":0.5,"2040":0.5,"2040.1":0.25,"2056":0.25,"2056.1":0.5,"2141":0.5,"2141.1":0.25,"2161":0.25,"2161.1":0.5,"2880":0.5,"2880.1":0,"3600":0,"3600.1":0.25},"min":1,"max":5},"greyscale":{"frames":{"2880":0,"2880.1":1,"3270":1,"3359":0.9,"3361":1,"3540":1,"3600":0.86,"3601":0.5,"3750":0.3,"3750.1":0,"4269":0,"4467":0.433125,"4589":0.7},"min":0,"max":1},"greyscale2":{"frames":{"3120":0,"3121":0.8501577287066246,"3142":0.4305993690851735,"3240":0.22870662460567825,"3360":0.20977917981072558,"3367":0.4085173501577287,"3370":1,"3471":1,"3600":0.5},"min":0,"max":1},"timeshift":{"frames":{"360":0.6433333333333333,"360.1":0.7733333333333333,"480":0.7733333333333333,"480.1":0.14833333333333334,"600":0.13166666666666665,"600.1":0.7733333333333333,"720":0.7733333333333333,"750":0.51,"2401":0.51,"2401.1":0.76,"2640":0.75,"2640.1":0.7033333333333334,"2880":0.6966666666666667,"2880.1":0.51},"min":-300,"max":300},"shiftX":{"frames":{"240":0.4166666666666667,"240.1":0.4896666666666667,"360":0.4896666666666667,"360.1":0.4383333333333333,"479":0.4383333333333333,"479.1":0.4383333333333333,"481":0.33666666666666667,"600":0.33666666666666667,"600.1":0.4166666666666667,"2401":0.4166666666666667,"2401.1":0.5333333333333333,"2640":0.5,"2640.1":0.425,"2880":0.425,"2880.1":0.4166666666666667},"min":-3,"max":3},"shiftY":{"frames":{"240":0.4166666666666667,"240.1":0.3666666666666667,"360":0.3666666666666667,"360.1":0.4166666666666667,"480":0.4166666666666667,"480.1":0.5466666666666667,"600":0.5466666666666667,"600.1":0.4166666666666667,"2401":0.4166666666666667,"2401.1":0.43333333333333335,"2640":0.43333333333333335,"2640.1":0.4166666666666667},"min":-3,"max":3},"zoomXY":{"frames":{"240":0.4666666666666666,"240.1":0.3466666666666667,"360":0.3466666666666667,"360.1":0.39999999999999997,"390":0.39999999999999997,"480":0.37272727272727274,"480.1":0.16,"600":0.16666666666666666,"600.1":0.2866666666666667,"720":0.2833333333333333,"720.1":0.39999999999999997,"930":0.39999999999999997,"1020":0.39999999999999997,"2401":0.7933333333333333,"2401.1":0.2333333333333333,"2640":0.2333333333333333,"2640.1":0.43333333333333335,"2880":0.3833333333333333,"2880.1":0.4666666666666666,"3600":0.4666666666666666,"3600.1":0.5499999999999999,"4350":0.7333333333333334,"4589":0.6466666666666666},"min":0,"max":3},"red":{"frames":{"870":0,"934":1,"935":0,"1021":0,"1022":0.4,"1025":0.4,"1029":0.2,"1050":0,"1140":0,"2040":0.714,"2041":0.26,"2057":0.6,"2058":0.34,"2085":0.75,"2401":1,"2402":0,"2700":0,"2701":0.25,"2708":0.23,"2760":0,"3750":0,"3751":0.6184615384615384,"3810":0},"min":0,"max":1},"skip":{"frames":{"840":1,"841":0.7733333333333333,"855":0.6,"856":0.26666666666666666,"871":0,"872":1,"2142":1,"2160":0,"2161":1},"min":0,"max":15},"distort":{"frames":{"1560":0,"1561":0.35,"1573":0.1,"1574":0.2,"1589":0.05,"1601":0,"2040":0,"2041":0.25,"2057":0.1,"2058":0.2,"2094":0,"2130":0,"2131":0.3,"2141":0.1,"2142":0.3,"2160":1,"2161":0.9089471726190477,"2163":0.19999999999999996,"2176":0},"min":0,"max":1}},"fragment":"// Right Hemisphere intro\n\n\nprecision highp float;\nvarying vec2 coordVar;\nuniform float t;\n\n\nvec3 massive[16]; // coordinates\nfloat zoom;\n\n\nvec3 rotate(vec3 p, vec3 a)\n{\n    vec3 s = sin(a), c = cos(a);\n    return p * mat3(\n         c.y,     s.z*s.y,            -s.y*c.z,\n        -s.x*s.y, c.x*c.z+s.x*s.z*c.y, s.z*c.x-s.x*c.z*c.y,\n         c.x*s.y, s.x*c.z-c.x*s.z*c.y, s.z*s.x+c.x*c.z*c.y\n    );\n}\n\n\nfloat squareSingle(vec3 o, vec3 c) // input: ray position, square center\n{\n    vec3 p, r; // moved vector, rotation\n    vec3 s = vec3(.5,.5,.001); // square size\n\n    r = c;\n    c.z = ( c.z + zoom ) * 4.;\n    p = o - c; // move square to 0,0,0\n    p = rotate(p, (t+timeshift)/29. * r); // rotate over axis x,y,z\n    r = max(p - s, -p - s); // differences\n\n    return max(max(r.x,r.y),r.z); // cube distance function\n}\n\n\nvoid main() {\n  \n    zoom = zoomshift + smoothstep(120.,180.,t+timeshift)*.6 - smoothstep(240.,300.,t+timeshift);\n    \n// objects coordinates\n\n    massive[0] = vec3(-1.821292,1.714108,-0.649904);\n    massive[1] = vec3(.080076,-1.894532,-0.054688);\n    massive[2] = vec3(-1.8955,1.937988,-0.651004);\n    massive[3] = vec3(.541992,-0.31836,-0.33008);\n    massive[4] = vec3(.233396,1.718748,1.398436);\n    massive[5] = vec3(1.362304,.159668,-0.252444);;\n    massive[6] = vec3(.193114,-1.802248,.1499);\n    massive[7] = vec3(-0.240724,1.624508,1.415036);\n    massive[8] = vec3(-0.833008,1.0166,-0.081056);\n    massive[9] = vec3(.291012,1.096188,-0.390628);\n    massive[10]= vec3(.262204,.458496,.170408);\n    massive[11]= vec3(-0.883792,-0.952884,-0.9418);\n    massive[12]= vec3(.48828,-1.416996,.151236);\n    massive[13]= vec3(1.387204,1.2832,-0.411624);\n    massive[14]= vec3(1.620116,-0.122316,-0.397952);\n    massive[11]-=shift11/vec3(70.,110.,-180.); // move closest object \n\n    float l, d, d2, e = .0001, aax, aay = .00015; // ray length, current distance, epsilon, anti-aliasing\n\n    vec3 xyz, color = vec3(0.), c, // 3d-coordinates, final color, aa-color\n    p, r, found1, found2, s = vec3(.5,.5,.001), // moved vector, center, rotation, found square, square size\n    norm = vec3(0.,0.,0.), ex = vec3(e,0.,0.), ey = vec3(0.,e,0.), ez = vec3(0.,0.,e);\n\n// antialiasing\nfor (int by=0; by<3; by++)\n{\naax = .00015;\nfor (int bx=0; bx<3; bx++)\n{\n\tvec2 uv = (coordVar + vec2(aax,aay) + vec2(shiftX,shiftY)) / vec2(1., 16./9.) * zoomXY;\n//\tvec2 uv = (coordVar + vec2(shiftX,shiftY)) / vec2(1., 16./9.) * zoomXY;\n\n// raymarching\n\tl = 1.;\n    xyz = normalize(vec3(uv, 1.)); // view direction\n\n    for (int i=0; i<5; i++) // trace to bounding sphere for the faster computation\n    {\n        if (i>=int(steps)) break;\n\t\td = 26.; // distance\n\t    for (int j=0; j<15; j++) if(j!=int(skip))\n\t    {\n\t        c = massive[j];\n\t        c.z = ( c.z + zoom ) * 4.;\n\t        d = min( d, length(xyz*l - c)-0.71 ); // sphere distance function\n\t    }\n        if (d<e) break;\n        l += d;\n        if (l>26.) break;\n    }\n\n    if (l<26.)\n    {\n        if (mod(uv.y,.08)<.04) l-=distort;\n        xyz *= l; // actual point\n\t    d = 26.;\n\t    for (int i=0; i<15; i++)\n\t    {\n\t        c = massive[i];\n\t        found1 = c;\n\t        r = c;\n\t        c.z = ( c.z + zoom ) * 4.;\n\t        p = xyz - c; // move square to 0,0,0\n\t        p = rotate(p, (t+timeshift)/29. * r); // rotate over axis x,y,z\n\t        r = max(p - s, -p - s); // differences\n\t        d2 = max(max(r.x,r.y),r.z); // cube distance function\n\t        if (d2 < d)\n\t        {\n\t            d = d2;\n\t            found2 = found1;\n\t        }\n\t    }\n        norm = normalize(vec3(\n        squareSingle(xyz+ex,found2)-squareSingle(xyz-ex,found2),\n        squareSingle(xyz+ey,found2)-squareSingle(xyz-ey,found2),\n        squareSingle(xyz+ez,found2)-squareSingle(xyz-ez,found2)));\n    }\n\n    \n    c = vec3(norm.xy,vec3(1.-l/20.));\n\n    c.z+=c.y/2.; c.y=c.y+c.x; // colour correction\n\n    color += clamp(c, 0., 1.); // accumulate aa-color\n\naax += .0003; // end of antialiasing loop \n}\naay += .0003;\n}  \ncolor /= 9.; // normalize aa-color\n\n    color = (1.-greyscale)*color + vec3(color.r+color.b*greyscale2) *greyscale;\n    color.xz+=red*vec2(abs(norm.y),color.b/3.);\n    gl_FragColor = vec4(color * Fade, 1.);\n}"}
